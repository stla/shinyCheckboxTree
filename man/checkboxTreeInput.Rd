% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/checkboxTree.R
\name{checkboxTreeInput}
\alias{checkboxTreeInput}
\title{Checkbox tree}
\usage{
checkboxTreeInput(
  inputId,
  nodes,
  sort = FALSE,
  single = FALSE,
  checkModel = "leaf",
  checked = list(),
  onlyLeafCheckboxes = FALSE,
  showExpandAll = FALSE
)
}
\arguments{
\item{inputId}{the input slot that will be used to access the value}

\item{nodes}{a list of nodes; each node is a named list with the following
fields:
\describe{
  \item{\code{label}}{node label - \emph{required}}
  \item{\code{value}}{the value associated to the node - \emph{required}}
  \item{\code{children}}{the children of the node, i.e. a list of nodes}
  \item{\code{className}}{a class name to add to the node}
  \item{\code{disabled}}{logical, whether to disable the node}
  \item{\code{showCheckbox}}{logical, whether the node should show a checkbox}
  \item{\code{title}}{a custom \code{title} attribute for the node}
}}

\item{sort}{logical, whether to sort the nodes by their label}

\item{single}{logical; if \code{TRUE}, only one node can be selected}

\item{checkModel}{\code{"leaf"} or \code{"all"}, specifies which checked
nodes should be included in the value}

\item{checked}{a list of initially checked nodes, identified by their value}

\item{onlyLeafCheckboxes}{logical, whether checkboxes should be shown only
for the leaves}

\item{showExpandAll}{logical; if \code{TRUE}, buttons for expanding and
collapsing all parent nodes will appear in the widget}
}
\description{
This creates a checkbox tree in the Shiny UI.
}
\examples{
if(interactive()) {

# make the nodes list from a vector of file paths
makeNodes <- function(leaves){
  dfs <- lapply(strsplit(leaves, "/"), function(s){
    item <-
      Reduce(function(a,b) paste0(a,"/",b), s[-1], s[1], accumulate = TRUE)
    data.frame(
      item = item,
      parent = c("root", item[-length(item)]),
      stringsAsFactors = FALSE
    )
  })
  dat <- dfs[[1]]
  for(i in 2:length(dfs)){
    dat <- merge(dat, dfs[[i]], all = TRUE)
  }
  f <- function(parent){
    i <- match(parent, dat$item)
    item <- dat$item[i]
    children <- dat$item[dat$parent==item]
    label <- tail(strsplit(item, "/")[[1]], 1)
    if(length(children)){
      list(
        label = label,
        value = item,
        children = lapply(children, f)
      )
    }else{
      list(label = label, value = item)
    }
  }
  lapply(dat$item[dat$parent == "root"], f)
}

folder <-
  list.files(system.file("www", "shared", package = "shiny"), recursive = TRUE)
nodes <- makeNodes(folder)


library(shiny)
library(shinyCheckboxTree)

ui <- fluidPage(
  tags$head(
    tags$style(HTML(".react-checkbox-tree { font-size: 13px; }"))
  ),
  br(),
  fluidRow(
    column(
      6,
      checkboxTreeInput("tree", nodes = nodes)
    ),
    column(
      6,
      verbatimTextOutput("checked")
    )
  )
)

server <- function(input, output, session) {
  output[["checked"]] <- renderPrint({
    cat(input[["tree"]], sep = "\n")
  })
}

shinyApp(ui, server)

}
}
\seealso{
\code{\link{updateCheckboxTreeInput}}
}
